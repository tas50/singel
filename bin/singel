#!/usr/bin/env ruby

lib =  File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

begin
  require 'optparse'
  require 'English'
  require 'aws-sdk-core'
  require 'json'
  require 'orchestrator.rb'
  require 'executor.rb'
rescue LoadError => e
  raise "Missing gem or lib #{e}"
end

# add a few methods for manipulating text
class String
  def to_green
    "\033[32m#{self}\033[0m"
  end

  def to_red
    "\033[31m#{self}\033[0m"
  end

  def indent(double_space_count = 1)
    double_space_count.times { insert(0, '  ') }
    self
  end
end

def parse_opts
  options = { :templates => [], :builders => [], :packer_dir => File.expand_path('./packer') }
  banner = "Singel - Unified system image creation using Packer\n\n" \
            "Usage: singel [action] [options]\n\n" \
            "  Actions:\n" \
            "    build: Build system images\n" \
            "    list: List available image templates and builder types (AMI, Virtualbox, etc)\n\n" \
            "  Options:\n"
  OptionParser.new do |opts|
    opts.banner = banner
    opts.on('-t', '--templates t1.json,t2.json', Array, 'Build only the specified comma separated list of templates') do |t|
      options[:templates] = t
    end
    opts.on('-b', '--builders type1,type2', Array, 'Build only the specified comma separated list of builder types') do |b|
      options[:builders] = b
    end
    opts.on('-p', '--packer_dir PATH', 'Path to the packer dir containing templates and other files') do |p|
      options[:packer_dir] = File.expand_path(p)
    end
    opts.on('-h', '--help', 'Displays Help') do
      puts opts
      exit
    end
  end.parse!(ARGV)

  options
end

unless ARGV[0]
  puts "You must provide an action for singel to execute on\n".to_red
  ARGV << '-h'
end

# parse the user provided options
options = parse_opts

SingelOrchestrator.new(options).run
